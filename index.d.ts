// Generated by dts-bundle v0.7.3

export class JsonParse {
    /**
      * Simple wrapper of JSON.parse so it can be included in promise chains.
      * @param jsonString
      * @returns {*}
      */
    static parse(jsonString: string): Promise<{}>;
    static parseIntArrayFromJsonString(param: string): Array<number>;
}

export class Keygen {
        /**
            * Return a unique identifier with the given `len`.
            *
            *     utils.uid(10);
            *     // => "FDaS435D2z"
            *
            * @param {Number} len
            * @return {String}
            * @api private
            */
        static uid(len: number): string;
        /**
            * Create a HMAC using SHA512
            *
            * @param {String} key - encryption key
            * @param {String} message - message to be encrypted
            * @return {String} encrypted HMAC
            */
        static hmacSHA512(key: string, message: string): Promise<string>;
        static hashSaltPassword(password: string): string;
}

export class Numbers {
    /**
      * Determine if the input is a numeric type
      *
      * @param n {Object} anything
      * @returns {boolean}
      */
    static isNumber: (n: any) => boolean;
    static roundFloat(value: number, numDecimals: number): number;
}

export class PromiseQueue {
    constructor(maxConcurrent?: number);
    add(promiseFunction: () => Promise<any>): Promise<any>;
    clear(resolvedResult: any): void;
    runAllPromiseFunctionsCancellable<T>(promiseFunctions: Array<() => Promise<T>>): Promise<any>;
    runAllPromiseFunctions<T>(promiseFunctions: Array<() => Promise<T>>): Promise<any>;
}

export class ResolvablePromise<T> {
    resolve: (value?: T | PromiseLike<T>) => void;
    reject: (reason?: any) => void;
    promise: Promise<T>;
    constructor(promise: Promise<T>);
}

export class RetryWithDelay {
    static retry(promiseFunction: (retryNumber: number) => Promise<any>, numRetries: number, delayMs: number): Promise<any>;
}

export class Arrays {
    static deduplicate<T>(array: Array<T>, isEqual: (a: T, b: T) => boolean): Array<T>;
}

export class Strings {
    static sanitizeEmail(email: string): string;
}

